#include <DHTesp.h>
#include <ESP32Servo.h>
#include <Arduino.h>
#include <LiquidCrystal_I2C.h> // I2C LCD Library // LCD Display
#include "WiFi.h"

#define BLYNK_TEMPLATE_ID "TMPL68KokV8jx"
#define BLYNK_TEMPLATE_NAME "Smart Crop Storage"
#define BLYNK_AUTH_TOKEN "4BlpecB5fsmFccwJNGk52yNnUBEhuuYv"
#include <BlynkSimpleEsp32.h>
#define DHTPIN 4 // Temperature Sensor
#define BUZZER_PIN 12 // Buzzer
#define TEMP_THRESHOLD 35
#define HUM_THRESHOLD 70
#define CO2_THRESHOLD 200
#define CO2_PIN 34 // MQ135 Gas sensor
#define SERVO_PIN 13 // servo motor
#define TRIGGER_PIN 14 // Ultrasonic
#define ECHO_PIN 15 // ultrasonic
#define WIFI_NETWORK "Jubayer"
#define WIFI_PASSWORD "25305856"
#define WIFI_TIMEOUT_MS 20000
//#define RELAY_PIN 26 
#define ARDUINO_SIGNAL_PIN 25  // ESP32 pin to send signal to Arduino



void connectToWiFi(){
      Serial.print("Connecting  to WiFi");
      WiFi.mode(WIFI_STA);
      WiFi.begin(WIFI_NETWORK, WIFI_PASSWORD);

      unsigned long startAttemptTime = millis();

      while(WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < WIFI_TIMEOUT_MS){

        Serial.print(".");
        delay(100);
      }

     if(WiFi.status() != WL_CONNECTED){
       Serial.println("Failed!");
     
     }else{
        Serial.print("Connected!");
        Serial.println(WiFi.localIP());
     }
}


Servo myServo;
DHTesp dht;
long duration;
long distance;

int pos = 0;

// Initialize LCD: (address 0x27, 16 columns, 2 rows)
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  Serial.begin(9600);
  dht.setup(DHTPIN, DHTesp::DHT22);
  Serial.println("DHT22 Sensor Initialized...");

  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(CO2_PIN, INPUT);
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

 

  pinMode(ARDUINO_SIGNAL_PIN, OUTPUT);
  digitalWrite(ARDUINO_SIGNAL_PIN, LOW); // Start LOW (fan OFF)


  myServo.attach(SERVO_PIN);
  myServo.write(0);
  connectToWiFi();

  lcd.init();           // Initialize the LCD
  lcd.backlight();      // Turn on the backlight
  lcd.setCursor(0, 0);
  lcd.print("Smart Crop Storage");
  delay(1000);
  lcd.clear();
  
  Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_NETWORK, WIFI_PASSWORD);
}

void loop() {
  float temperature = dht.getTemperature();
  float humidity = dht.getHumidity();

  int co2AnalogValue = analogRead(CO2_PIN);
  int co2ppm = map(co2AnalogValue, 0, 4095, 0, 1000);

  measureDistance();
  servo();
  // show on serial monitor
  Serial.print("Temp: ");
  Serial.print(temperature);
  Serial.print("Â°C | Humidity: ");
  Serial.print(humidity);
  Serial.print("% | CO2: ");
  Serial.print(co2ppm);
  Serial.print(" ppm | Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Show values on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("T:");
  lcd.print((float)temperature);
  lcd.print("C H:");
  lcd.print((int)humidity);
  lcd.print("%");

  lcd.setCursor(0, 1);
  lcd.print("CO2:");
  lcd.print(co2ppm);
  lcd.print(" D:");
  lcd.print(distance);
  lcd.print("cm");
  Blynk.virtualWrite(V2, temperature);
  Blynk.virtualWrite(V3, humidity);
  Blynk.virtualWrite(V1, co2ppm);
  Blynk.virtualWrite(V0, distance);
  Blynk.run();
  // Threshold check
  if (temperature > TEMP_THRESHOLD || humidity > HUM_THRESHOLD || co2ppm>CO2_THRESHOLD || distance < 3) {
    activateBuzzer();
    //digitalWrite(RELAY_PIN, HIGH); // Fan ON
      digitalWrite(ARDUINO_SIGNAL_PIN, LOW);    // Signal Arduino to turn on fan

    
  } else {
    deactivateBuzzer();
    //digitalWrite(RELAY_PIN, LOW);   // Fan OFF
      digitalWrite(ARDUINO_SIGNAL_PIN, HIGH);     // Signal Arduino to turn off fan

    
  }

  delay(3000);
}

void activateBuzzer() {
  digitalWrite(BUZZER_PIN, HIGH);
}

void deactivateBuzzer() {
  digitalWrite(BUZZER_PIN, LOW);
}

void servo() {
  for (pos = 0; pos <= 180; pos += 1) {
    myServo.write(pos);
    delay(10);
  }
  delay(1000);
  for (pos = 180; pos >= 0; pos -= 1) {
    myServo.write(pos);
    delay(10);
  }
}

void measureDistance() {
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  duration = pulseIn(ECHO_PIN, HIGH);
  distance = (duration * 0.0343) / 2;
}
